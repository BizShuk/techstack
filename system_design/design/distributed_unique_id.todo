Distributed Unique ID System:
    It has two different requirements: unlimited number, limited number. The number can't be repeat in both scenario

    For unlimited number, it can grow as much as it can.
    For limited number, it should give next ID which can't be predict.

    Consideration:
        ☐ Monotonically increasing 強制遞增
        ☐ Just non-repeatable only 只要不重複
        ☐ Random with non-repeatable in a range
    Shorten URL:
        If the url is the same, it'll generate the same key without wasting resources.

        ☐ URL + Hash(parameter)
        Solution1:
            ☐ Convert url to decimal and convert it to base62/64
            ☐ Get first few chars from MD5 hash of URL

    Unique ID:
        ☐ Instance ID + Counter, with durability.
    Single Server:
        ☐ Generate UUID by single server

    Zookeeper:
        ☐ To give a range to each server.
    Twitter Snowflake:
        ☐ Epoch timestamp in millisecond precision - 41 bits (gives us 69 years with a custom epoch)
        ☐ Configured machine id - 10 bits (gives us up to 1024 machines)
        ☐ Sequence number - 12 bits (A local counter per machine that rolls over every 4096)